package Menu;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

import javax.swing.*;

import Dialog.AboutDialog;
import Dialog.DialogFrame;

public class SwingMenuBarDemoMain extends JFrame{
	
	private AboutDialog dialog;
	private JFileChooser chooser,opener;
	JTextArea textArea = new JTextArea(6,12);
    JScrollPane scrollPane = new JScrollPane(textArea);
    JMenuItem newItem = new JMenuItem("New",new ImageIcon("src/resources/new.png"));
    JMenuItem openItem = new JMenuItem("Open",new ImageIcon("src/resources/open.png"));
    JMenuItem saveItem = new JMenuItem("Save",new ImageIcon("src/resources/save.png"));
    JMenuItem exitItem = new JMenuItem("Exit",new ImageIcon("src/resources/save.png"));
    JMenuItem aboutItem = new JMenuItem("About",new ImageIcon("src/resources/open.png"));
    
    JMenuItem cutItem = new JMenuItem("Cut", new ImageIcon("src/resources/cut.png"));
    JMenuItem copyItem = new JMenuItem("Copy", new ImageIcon("src/resources/copy.png"));
    JMenuItem pasteItem = new JMenuItem("Paste", new ImageIcon("src/resources/paste.png"));
    
	 
	
	SwingMenuBarDemoMain(){
		
		chooser = new JFileChooser();
		opener = new JFileChooser();
		//setting 
		JMenuBar menuBar = new JMenuBar();
		setJMenuBar(menuBar);
		JMenu fileMenu = new JMenu("File");
		menuBar.add(fileMenu);
		
		
		
		JMenu helpMenu = new JMenu("Help");
		helpMenu.setMnemonic('H');
		menuBar.add(helpMenu);
		helpMenu.add(aboutItem);
		
		aboutItem.setMnemonic('A');
		
		JMenu editMenu = new JMenu("Edit");
		menuBar.add(editMenu);
		
		//cutItem.setHorizontalTextPosition(SwingConstants.LEFT);
		editMenu.add(cutItem);
		editMenu.add(copyItem);
		editMenu.add(pasteItem);
		
		newItem.setAccelerator(KeyStroke.getKeyStroke("ctrl N"));
	    fileMenu.add(newItem);
	    
		newItem.addActionListener(new ActionListener() {
					
					@Override
					public void actionPerformed(ActionEvent e) {
						saveConfirm();
					}
				});
		
		openItem.setAccelerator(KeyStroke.getKeyStroke("ctrl O"));
		fileMenu.add(openItem);

		openItem.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent event)  {
            	openFilehandling();
             }   
          });

		fileMenu.add(saveItem);
        //saveItem.setEnabled(false);
		saveItem.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				saveFilehandling();
			}
		});
		
		fileMenu.add(aboutItem);
		//Dialog box in about click
	     aboutItem.addActionListener(new ActionListener(){
	           public void actionPerformed(ActionEvent event){
	              if (dialog == null) // first time
	                dialog = new AboutDialog(SwingMenuBarDemoMain.this);
	                dialog.setVisible(true); // pop up dialog
	              }
	        });
	     

	        // The Exit item exits the program.

	     fileMenu.add(exitItem);
	     exitItem.addActionListener(new ActionListener(){
             public void actionPerformed(ActionEvent event){
                System.exit(0);
              }
          });

		JMenu optionsMenu = new JMenu("Options");
		editMenu.add(optionsMenu);

		JCheckBoxMenuItem readonlyItem = new JCheckBoxMenuItem("Read-only",new ImageIcon("src/resources/read.png"));
		readonlyItem.setHorizontalTextPosition(SwingConstants.LEFT);
		JRadioButtonMenuItem insertItem = new JRadioButtonMenuItem("Insert",new ImageIcon("src/resources/insert.png"));
		insertItem.setHorizontalTextPosition(SwingConstants.LEFT);
		
		
    	optionsMenu.add(readonlyItem);
    	optionsMenu.add(insertItem);

    	JPopupMenu popup = new JPopupMenu();
   	    JMenuItem item = new JMenuItem("Cut");
   	    JMenuItem item2 = new JMenuItem("Select All");
	    popup.add(item);
	    popup.add(item2);
	    add(scrollPane);


		setSize(400, 400);
    	setVisible(true);
    	
    	
	}
	
	void saveConfirm() {
		//String data=textArea.getText().trim(); //read contents of text area into 'data'
		//(data.length() > 0)
		 
		  if(!textArea.equals(null) ){
		     newItem.addActionListener(new ActionListener() {
				
				@Override
				public void actionPerformed(ActionEvent e) {
					System.out.println("I am not empty");
					System.out.println(textArea);
					
					int selection = JOptionPane.showConfirmDialog(null,
							   "Do you want to save existing file", "Confirmation for Saving",
							   JOptionPane.OK_CANCEL_OPTION,
							   JOptionPane.QUESTION_MESSAGE);
							if (selection == JOptionPane.OK_OPTION){
								System.out.println("Save ..");
								saveFilehandling();
							}else{
								System.out.println("Cancel....");
					}		
				}
			});
		}
		
	}
	
	void openFilehandling() {
		chooser.setDialogTitle("Location of file to open");
        chooser.setCurrentDirectory(new File("/home/ishworpanta/Documents/TEXT"));

		// show file chooser dialog
		int result = chooser.showOpenDialog(SwingMenuBarDemoMain.this);

        // if image file accepted, set it as icon of the label
        if (result == JFileChooser.APPROVE_OPTION){
           String fileContent = "";
           String name = chooser.getSelectedFile().getPath();
           //System.out.println("File Path: "+name);
           File file = new File(name);
       	   FileInputStream fis = null;
       		try {
       			fis = new FileInputStream(file);
       			//System.out.println("Total file size to read in(bytes)" + fis.available());
       			int content;
       			while((content = fis.read())!= -1) {
       				//convert to char and display it
       				char c = (char) content;
       				fileContent += String.valueOf(c);
       				
       			}
       			
       		}catch(IOException e) {
       			e.printStackTrace();
       			
       		}finally {
       			try {
       				if (fis != null) {
       					fis.close();
       				}
       					}catch(IOException ex) {
       					ex.printStackTrace();
       				}

       		}
       		//setting text file content in textArea 
       		//System.out.print(fileContent);
       		textArea.setText(fileContent);
        }
	}
	
	
	
	void saveFilehandling() {
		opener.setCurrentDirectory(new File("/home/ishworpanta/Documents/TEXT"));
		// show file chooser dialog
			int result = opener.showSaveDialog(SwingMenuBarDemoMain.this);
        // if image file accepted, set it as icon of the label
        if (result == JFileChooser.APPROVE_OPTION){
           String content = "";
           	//saving file in name location
           		FileOutputStream fop = null;
        		File file ;
        		
        		//getting content from textArea
        	    content = textArea.getText();
        	    System.out.println(content);
        		
        	    try {
        			file  =  opener.getSelectedFile();
        			fop  = new FileOutputStream(file);
        			
        			//if file does not exist
        			
        			if(!file.exists()) {
        				file.createNewFile();
        			}
        			
        			//get the content in bytes
        			byte[] contentInBytes = content.getBytes();
        			fop.write(contentInBytes);
        			fop.flush();
        			fop.close();
        			System.out.println("Done");

        		}catch(IOException e1) {
        			e1.printStackTrace();
        		}finally {
        			try {
        				if (fop!=null) {
        					fop.close();
        				}
        			}catch(IOException e1) {
        				e1.printStackTrace();
        				
        		}
        	}	
        }	
	}
	
	
	
	public static void main(String[] args) {
		new SwingMenuBarDemoMain();
	}
	
}